#
# docker-compose.ci.yml
#
#   Using Docker Compose helps us test the library on both Node 14 and Node 16. The purpose is _not_ to burden the
#   developer experience (and documentation) with Docker. This file is only used for CI.
#
# Context:
#   - Cloud Build, with 'firebase-ci-builder' image in the Container Registry
#
# Environment values (Cloud Build):
#   - 'CI_BUILDER_IMAGE'
#   - 'NODE_V': "14"|"16"
#
#   - pwd: /workspace
#
# Intentions:
#   - Test with Node 14
#   - Test with Node 16
#
# Docker Compose (v3) note:
#   BE CAREFUL with use of pipe ('|') or '&&' in the commands! See -> https://stackoverflow.com/a/68590318/14455
#
# References:
#   Overview of Docker Compose (Docker docs)
#     -> https://docs.docker.com/compose/
#   Compose file version 3 reference
#     -> https://docs.docker.com/compose/compose-file/compose-file-v3/
#
version: '3.0'

services:
  # Launch Firebase Emulators, with certain warning and info messages suppressed.
  #
  emul:
    image: ${CI_BUILDER_IMAGE:-firebase-ci-builder:9.17.0-node16-npm7}
    ports:
      - "4000:4000"
      - "5002:5002"
      - "6767:6767"
      # Keep ports aligned with 'firebase.json'
    volumes:
      - .:/work
    working_dir: /work
    command: bash -o pipefail -c
      'echo "Launching Docker... üê≥" &&
      firebase emulators:start --project=demo-1
        | grep -v -E "Detected demo project ID|You are not signed in to the Firebase CLI|You are not currently authenticated"'
      # Keep project ID in sync with 'package.json' and 'sample/test-fns/setup.jest.js'
    environment:
      - DEBUG_COLOR=1
    #
    # Note: The rest ensures the ports are visible in Cloud Build. It keeps launched DC services running, for the
    #   duration of the build. Disabled these for local testing!
    #
    network_mode: cloudbuild
    container_name: emul

  # WARM UP the engines
  #
  # Firebase Emulators are SLOW to wake. This part runs a minimal set of tests (the results of which are not used),
  # to wake up the necessary subsystems server-side. This results in more dependable test times in the actual tests.
  #
  warm-up:
    build:
      context: ci/dc-tools/n-user/
      args:
        - NODE=${NODE_V:-16}
    ports:
      - "6768:6768"
    volumes:
      - .:/work:ro
    working_dir: /work
    command: sh -o pipefail -c
      'wait-for-it emul:6767 &&
      wait-for-it emul:5002 &&
      npm run dc:warm-up &&
      socat TCP-LISTEN:6768,fork TCP:emul:6767
      '
    environment:
      - EMUL_HOST=emul
      - WARM_UP_TIMEOUT=15000
    #
    depends_on: ['emul']
    #profiles: ['manual']     # enable manual launch to debug 'emul' launch (if problems)
    #
    network_mode: cloudbuild
    container_name: warm-up

  # Used via 'docker compose run --rm warmed-up'.
  #
  # A separate target to proceed 'npm run ci:test' - and so it does not [...]
  #
  warmed-up:
    build:
      context: ci/dc-tools/n-user/
      args:
        - NODE=${NODE_V:-16}
    command: sh -o pipefail -c
      'wait-for-it warm-up:6768 --timeout=26
      '
        # times observed (Cloud Build): 13s
    depends_on: ['warm-up']
    profiles: ['manual']
    #
    network_mode: cloudbuild
